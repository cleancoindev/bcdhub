parameter (pair (pair (pair (int %destination_x) (int %destination_y)) (int %start_x))
                (int %start_y));
storage (pair
          (pair
            (pair (pair (map %board int (map int int)) (address %current_player)) (address %player1))
            (address %player2))
          (option %winner address));
code { DUP ;
       CDR ;
       SWAP ;
       CAR ;
       PUSH (map address int) {} ;
       PUSH (option int) (Some 2) ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CDR ;
       UPDATE ;
       PUSH (option int) (Some 1) ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CDR ;
       UPDATE ;
       DIG 2 ;
       DUP ;
       DUG 3 ;
       CAR ;
       CAR ;
       CAR ;
       CAR ;
       DIG 2 ;
       DUP ;
       DUG 3 ;
       CDR ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       DIG 2 ;
       DUP ;
       DUG 3 ;
       CAR ;
       CDR ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       DUP ;
       PUSH int 0 ;
       COMPARE ;
       NEQ ;
       IF { {} } { { PUSH string "WrongCondition: piece != 0" ; FAILWITH } } ;
       SWAP ;
       DUP ;
       DUG 2 ;
       SENDER ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       SWAP ;
       DUP ;
       DUG 2 ;
       COMPARE ;
       EQ ;
       IF { {} } { { PUSH string "WrongCondition: piece == color_map[sp.sender]" ; FAILWITH } } ;
       PUSH int 8 ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CAR ;
       COMPARE ;
       LT ;
       IF
         { { PUSH int 8 ; DIG 3 ; DUP ; DUG 4 ; CAR ; CAR ; CDR ; COMPARE ; LT } }
         { PUSH bool False } ;
       IF
         { {} }
         { { PUSH string "WrongCondition: (params.destination_x < 8) & (params.destination_y < 8)" ;
             FAILWITH } } ;
       PUSH int 0 ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CAR ;
       CAR ;
       CAR ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CAR ;
       CDR ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CAR ;
       CAR ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       COMPARE ;
       EQ ;
       IF
         { {} }
         { { PUSH string "WrongCondition: self.data.board[params.destination_y][params.destination_x] == 0" ;
             FAILWITH } } ;
       DUP ;
       PUSH int 1 ;
       COMPARE ;
       EQ ;
       IF
         { { DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             CDR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             COMPARE ;
             LE ;
             IF
               { {} }
               { { PUSH string "WrongCondition: params.start_y <= params.destination_y" ; FAILWITH } } } }
         { {} } ;
       DUP ;
       PUSH int 2 ;
       COMPARE ;
       EQ ;
       IF
         { { DIG 2 ;
             DUP ;
             DUG 3 ;
             CAR ;
             CAR ;
             CDR ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             COMPARE ;
             GE ;
             IF
               { {} }
               { { PUSH string "WrongCondition: params.start_y >= params.destination_y" ; FAILWITH } } } }
         { {} } ;
       DUP ;
       PUSH int 1 ;
       COMPARE ;
       EQ ;
       IF { PUSH bool True } { { DUP ; PUSH int 2 ; COMPARE ; EQ } } ;
       IF
         { { PUSH nat 3 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CAR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             CAR ;
             CDR ;
             SUB ;
             ABS ;
             COMPARE ;
             LT ;
             IF
               { {} }
               { { PUSH string "WrongCondition: (abs(params.start_x - params.destination_x)) < 3" ;
                   FAILWITH } } } }
         { {} } ;
       DUP ;
       PUSH int 1 ;
       COMPARE ;
       EQ ;
       IF { PUSH bool True } { { DUP ; PUSH int 2 ; COMPARE ; EQ } } ;
       IF
         { { PUSH nat 3 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CDR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             CDR ;
             SUB ;
             ABS ;
             COMPARE ;
             LT ;
             IF
               { {} }
               { { PUSH string "WrongCondition: (abs(params.start_y - params.destination_y)) < 3" ;
                   FAILWITH } } } }
         { {} } ;
       PUSH int 0 ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CAR ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CDR ;
       SUB ;
       COMPARE ;
       EQ ;
       IF
         { PUSH bool True }
         { { PUSH int 0 ; DIG 3 ; DUP ; DUG 4 ; CAR ; CAR ; CDR ; DIG 4 ; DUP ; DUG 5 ; CDR ; SUB ; COMPARE ; EQ } } ;
       IF
         { {} }
         { { PUSH string "WrongCondition: ((params.start_x - params.destination_x) == 0) | ((params.start_y - params.destination_y) == 0)" ;
             FAILWITH } } ;
       PUSH nat 0 ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CAR ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CDR ;
       SUB ;
       ABS ;
       COMPARE ;
       GT ;
       IF
         { PUSH bool True }
         { { PUSH nat 0 ; DIG 3 ; DUP ; DUG 4 ; CAR ; CAR ; CDR ; DIG 4 ; DUP ; DUG 5 ; CDR ; SUB ; ABS ; COMPARE ; GT } } ;
       IF
         { {} }
         { { PUSH string "WrongCondition: ((abs(params.start_x - params.destination_x)) > 0) | ((abs(params.start_y - params.destination_y)) > 0)" ;
             FAILWITH } } ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       DUP ;
       CAR ;
       CAR ;
       CAR ;
       CAR ;
       DUP ;
       DIG 5 ;
       DUP ;
       DUG 6 ;
       CDR ;
       DUP ;
       DUG 2 ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       PUSH (option int) (Some 0) ;
       DIG 7 ;
       DUP ;
       DUG 8 ;
       CAR ;
       CDR ;
       UPDATE ;
       SOME ;
       SWAP ;
       UPDATE ;
       SWAP ;
       DUP ;
       DIP { { CAR ;
               DUP ;
               DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
               CDR ;
               SWAP ;
               PAIR } } ;
       CDR ;
       SWAP ;
       PAIR ;
       DUG 4 ;
       DIG 3 ;
       DROP ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CDR ;
       SENDER ;
       COMPARE ;
       EQ ;
       IF
         { { PUSH int 7 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CDR ;
             COMPARE ;
             EQ ;
             IF
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 11) ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CAR ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } }
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 1) ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } } } }
         { { PUSH int 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CDR ;
             COMPARE ;
             EQ ;
             IF
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 22) ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CAR ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } }
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 2) ;
                   DIG 7 ;
                   DUP ;
                   DUG 8 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } } } } ;
       DUP ;
       PUSH int 1 ;
       COMPARE ;
       EQ ;
       IF { PUSH bool True } { { DUP ; PUSH int 2 ; COMPARE ; EQ } } ;
       IF
         { { PUSH int 7 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             COMPARE ;
             LT ;
             IF
               { { PUSH int 0 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CDR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH int 1 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CDR ;
                   ADD ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   EQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[params.start_y][params.start_x + 1] == 0" ;
                         FAILWITH } } } }
               { {} } ;
             PUSH int 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             COMPARE ;
             GT ;
             IF
               { { PUSH int 0 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   PUSH int 1 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CDR ;
                   SUB ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CDR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   EQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[params.start_y - 1][params.start_x] == 0" ;
                         FAILWITH } } } }
               { {} } ;
             PUSH int 7 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             COMPARE ;
             LT ;
             IF
               { { PUSH int 0 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   PUSH int 1 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CDR ;
                   ADD ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CDR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   EQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[params.start_y + 1][params.start_x] == 0" ;
                         FAILWITH } } } }
               { {} } } }
         { { PUSH int 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             COMPARE ;
             GT ;
             IF
               { { PUSH int 1 ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   CAR ;
                   CDR ;
                   SUB ;
                   DUP ;
                   PUSH int 0 ;
                   COMPARE ;
                   LT ;
                   LOOP { PUSH int 0 ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CDR ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          COMPARE ;
                          NEQ ;
                          IF
                            { { DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                SENDER ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                NEQ ;
                                IF
                                  { { DUP ;
                                      PUSH int 0 ;
                                      COMPARE ;
                                      LT ;
                                      IF
                                        { { PUSH int 0 ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            PUSH int 1 ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            SUB ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            COMPARE ;
                                            NEQ ;
                                            IF
                                              { {} }
                                              { { PUSH string "WrongCondition: self.data.board[params.start_y][i - 1] != 0" ;
                                                  FAILWITH } } } }
                                        { {} } } }
                                  { {} } } }
                            { {} } ;
                          PUSH int -1 ;
                          ADD ;
                          DUP ;
                          PUSH int 0 ;
                          COMPARE ;
                          LT } ;
                   DROP } }
               { {} } ;
             PUSH int 6 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CDR ;
             COMPARE ;
             LT ;
             IF
               { { PUSH int 1 ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   CAR ;
                   CDR ;
                   ADD ;
                   DUP ;
                   PUSH int 7 ;
                   COMPARE ;
                   GT ;
                   LOOP { PUSH int 0 ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CDR ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          COMPARE ;
                          NEQ ;
                          IF
                            { { DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                SENDER ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                NEQ ;
                                IF
                                  { { DUP ;
                                      PUSH int 7 ;
                                      COMPARE ;
                                      GT ;
                                      IF
                                        { { PUSH int 0 ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            PUSH int 1 ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            SUB ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            COMPARE ;
                                            NEQ ;
                                            IF
                                              { {} }
                                              { { PUSH string "WrongCondition: self.data.board[params.start_y][i - 1] != 0" ;
                                                  FAILWITH } } } }
                                        { {} } } }
                                  { {} } } }
                            { {} } ;
                          PUSH int 1 ;
                          ADD ;
                          DUP ;
                          PUSH int 7 ;
                          COMPARE ;
                          GT } ;
                   DROP } }
               { {} } ;
             PUSH int 1 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             COMPARE ;
             GT ;
             IF
               { { PUSH int 1 ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   CDR ;
                   SUB ;
                   DUP ;
                   PUSH int 0 ;
                   COMPARE ;
                   LT ;
                   LOOP { PUSH int 0 ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CDR ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          COMPARE ;
                          NEQ ;
                          IF
                            { { DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                SENDER ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                NEQ ;
                                IF
                                  { { DUP ;
                                      PUSH int 0 ;
                                      COMPARE ;
                                      LT ;
                                      IF
                                        { { PUSH int 0 ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            PUSH int 1 ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            SUB ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            COMPARE ;
                                            NEQ ;
                                            IF
                                              { {} }
                                              { { PUSH string "WrongCondition: self.data.board[i - 1][params.start_x] != 0" ;
                                                  FAILWITH } } } }
                                        { {} } } }
                                  { {} } } }
                            { {} } ;
                          PUSH int -1 ;
                          ADD ;
                          DUP ;
                          PUSH int 0 ;
                          COMPARE ;
                          LT } ;
                   DROP } }
               { {} } ;
             PUSH int 6 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CDR ;
             COMPARE ;
             LT ;
             IF
               { { PUSH int 1 ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   CDR ;
                   ADD ;
                   DUP ;
                   PUSH int 7 ;
                   COMPARE ;
                   GT ;
                   LOOP { PUSH int 0 ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CAR ;
                          CAR ;
                          CAR ;
                          DIG 2 ;
                          DUP ;
                          DUG 3 ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          DIG 5 ;
                          DUP ;
                          DUG 6 ;
                          CAR ;
                          CDR ;
                          GET ;
                          IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                          COMPARE ;
                          NEQ ;
                          IF
                            { { DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                SENDER ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 5 ;
                                DUP ;
                                DUG 6 ;
                                CAR ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                NEQ ;
                                IF
                                  { { DUP ;
                                      PUSH int 7 ;
                                      COMPARE ;
                                      GT ;
                                      IF
                                        { { PUSH int 0 ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            CAR ;
                                            PUSH int 1 ;
                                            DIG 3 ;
                                            DUP ;
                                            DUG 4 ;
                                            SUB ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            DIG 5 ;
                                            DUP ;
                                            DUG 6 ;
                                            CAR ;
                                            CDR ;
                                            GET ;
                                            IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                            COMPARE ;
                                            NEQ ;
                                            IF
                                              { {} }
                                              { { PUSH string "WrongCondition: self.data.board[i - 1][params.start_x] != 0" ;
                                                  FAILWITH } } } }
                                        { {} } } }
                                  { {} } } }
                            { {} } ;
                          PUSH int 1 ;
                          ADD ;
                          DUP ;
                          PUSH int 7 ;
                          COMPARE ;
                          GT } ;
                   DROP } }
               { {} } } } ;
       PUSH nat 1 ;
       DIG 3 ;
       DUP ;
       DUG 4 ;
       CAR ;
       CAR ;
       CDR ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CDR ;
       SUB ;
       DIG 4 ;
       DUP ;
       DUG 5 ;
       CAR ;
       CAR ;
       CAR ;
       DIG 5 ;
       DUP ;
       DUG 6 ;
       CAR ;
       CDR ;
       SUB ;
       SUB ;
       ABS ;
       COMPARE ;
       EQ ;
       IF
         { { DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CDR ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CAR ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } }
               { { DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CDR ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CAR ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 4 ;
                   DIG 3 ;
                   DROP } } } }
         { { PUSH nat 0 ;
             DIG 3 ;
             DUP ;
             DUG 4 ;
             CAR ;
             CAR ;
             CAR ;
             DIG 4 ;
             DUP ;
             DUG 5 ;
             CAR ;
             CDR ;
             SUB ;
             ABS ;
             COMPARE ;
             GT ;
             IF
               { { PUSH int 0 ;
                   PUSH int 0 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CDR ;
                   SUB ;
                   COMPARE ;
                   GT ;
                   IF
                     { { PUSH int 1 ; DIG 4 ; DUP ; DUG 5 ; CAR ; CAR ; CAR ; ADD ; SWAP ; DROP } }
                     { { PUSH int 1 ; DIG 4 ; DUP ; DUG 5 ; CAR ; CAR ; CAR ; SUB ; SWAP ; DROP } } ;
                   PUSH int 0 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   NEQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[params.destination_y][previous_square_x] != 0" ;
                         FAILWITH } } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   NEQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[params.destination_y][previous_square_x] != color_map[sp.sender]" ;
                         FAILWITH } } ;
                   PUSH int 11 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   COMPARE ;
                   EQ ;
                   IF { PUSH bool True } { { PUSH int 22 ; DIG 2 ; DUP ; DUG 3 ; COMPARE ; EQ } } ;
                   IF
                     { { PUSH int 0 ;
                         PUSH int 0 ;
                         PUSH int 0 ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         CAR ;
                         CAR ;
                         CAR ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         CAR ;
                         CDR ;
                         SUB ;
                         COMPARE ;
                         GT ;
                         IF
                           { { SWAP ;
                               PUSH int 2 ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               CAR ;
                               CAR ;
                               CAR ;
                               ADD ;
                               SWAP ;
                               DROP ;
                               SWAP ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               DROP ;
                               CAR ;
                               CDR } }
                           { { SWAP ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               DROP ;
                               CAR ;
                               CDR ;
                               SWAP ;
                               PUSH int 2 ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               CAR ;
                               CAR ;
                               CAR ;
                               SUB ;
                               SWAP ;
                               DROP } } ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         COMPARE ;
                         GT ;
                         LOOP { PUSH int 0 ;
                                DIG 9 ;
                                DUP ;
                                DUG 10 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 9 ;
                                DUP ;
                                DUG 10 ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                EQ ;
                                IF
                                  { {} }
                                  { { PUSH string "WrongCondition: self.data.board[i][params.start_y] == 0" ;
                                      FAILWITH } } ;
                                PUSH int 1 ;
                                ADD ;
                                DUP ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                COMPARE ;
                                GT } ;
                         DROP ;
                         DROP ;
                         DROP ;
                         DROP } }
                     { {} } ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 6 ;
                   DUP ;
                   DUG 7 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 0) ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 5 ;
                   DIG 4 ;
                   DROP ;
                   DROP } }
               { { PUSH int 0 ;
                   PUSH int 0 ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   CAR ;
                   CAR ;
                   CDR ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CDR ;
                   SUB ;
                   COMPARE ;
                   GT ;
                   IF
                     { { PUSH int 1 ; DIG 4 ; DUP ; DUG 5 ; CAR ; CAR ; CDR ; ADD ; SWAP ; DROP } }
                     { { PUSH int 1 ; DIG 4 ; DUP ; DUG 5 ; CAR ; CAR ; CDR ; SUB ; SWAP ; DROP } } ;
                   PUSH int 0 ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   NEQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[previous_square_y][params.destination_x] != 0" ;
                         FAILWITH } } ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   SENDER ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   DIG 5 ;
                   DUP ;
                   DUG 6 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   COMPARE ;
                   NEQ ;
                   IF
                     { {} }
                     { { PUSH string "WrongCondition: self.data.board[previous_square_y][params.destination_x] != color_map[sp.sender]" ;
                         FAILWITH } } ;
                   PUSH int 11 ;
                   DIG 2 ;
                   DUP ;
                   DUG 3 ;
                   COMPARE ;
                   EQ ;
                   IF { PUSH bool True } { { PUSH int 22 ; DIG 2 ; DUP ; DUG 3 ; COMPARE ; EQ } } ;
                   IF
                     { { PUSH int 0 ;
                         PUSH int 0 ;
                         PUSH int 0 ;
                         DIG 6 ;
                         DUP ;
                         DUG 7 ;
                         CAR ;
                         CAR ;
                         CDR ;
                         DIG 7 ;
                         DUP ;
                         DUG 8 ;
                         CDR ;
                         SUB ;
                         COMPARE ;
                         GT ;
                         IF
                           { { SWAP ;
                               PUSH int 2 ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               CAR ;
                               CAR ;
                               CDR ;
                               ADD ;
                               SWAP ;
                               DROP ;
                               SWAP ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               DROP ;
                               CDR } }
                           { { SWAP ;
                               DIG 5 ;
                               DUP ;
                               DUG 6 ;
                               SWAP ;
                               DROP ;
                               CDR ;
                               SWAP ;
                               PUSH int 2 ;
                               DIG 6 ;
                               DUP ;
                               DUG 7 ;
                               CAR ;
                               CAR ;
                               CDR ;
                               SUB ;
                               SWAP ;
                               DROP } } ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         DUP ;
                         DIG 2 ;
                         DUP ;
                         DUG 3 ;
                         COMPARE ;
                         GT ;
                         LOOP { PUSH int 0 ;
                                DIG 9 ;
                                DUP ;
                                DUG 10 ;
                                CAR ;
                                CAR ;
                                CAR ;
                                CAR ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                DIG 9 ;
                                DUP ;
                                DUG 10 ;
                                CAR ;
                                CDR ;
                                GET ;
                                IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                                COMPARE ;
                                EQ ;
                                IF
                                  { {} }
                                  { { PUSH string "WrongCondition: self.data.board[i][params.start_x] == 0" ;
                                      FAILWITH } } ;
                                PUSH int 1 ;
                                ADD ;
                                DUP ;
                                DIG 2 ;
                                DUP ;
                                DUG 3 ;
                                COMPARE ;
                                GT } ;
                         DROP ;
                         DROP ;
                         DROP ;
                         DROP } }
                     { {} } ;
                   DIG 4 ;
                   DUP ;
                   DUG 5 ;
                   DUP ;
                   CAR ;
                   CAR ;
                   CAR ;
                   CAR ;
                   DUP ;
                   DIG 3 ;
                   DUP ;
                   DUG 4 ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
                   PUSH (option int) (Some 0) ;
                   DIG 8 ;
                   DUP ;
                   DUG 9 ;
                   CAR ;
                   CAR ;
                   CAR ;
                   UPDATE ;
                   SOME ;
                   SWAP ;
                   UPDATE ;
                   SWAP ;
                   DUP ;
                   DIP { { CAR ;
                           DUP ;
                           DIP { { CAR ; DUP ; DIP { { CAR ; CDR ; SWAP ; PAIR } } ; CDR ; SWAP ; PAIR } } ;
                           CDR ;
                           SWAP ;
                           PAIR } } ;
                   CDR ;
                   SWAP ;
                   PAIR ;
                   DUG 5 ;
                   DIG 4 ;
                   DROP ;
                   DROP } } } } ;
       PUSH int 3 ;
       DIG 2 ;
       DUP ;
       DUG 3 ;
       SENDER ;
       GET ;
       IF_NONE { { PUSH unit Unit ; FAILWITH } } { {} } ;
       SUB ;
       ABS ;
       PUSH int 0 ;
       PUSH (list int) { 7 ; 6 ; 5 ; 4 ; 3 ; 2 ; 1 ; 0 } ;
       ITER { PUSH (list int) { 7 ; 6 ; 5 ; 4 ; 3 ; 2 ; 1 ; 0 } ;
              ITER { DIG 2 ; PUSH int 1 ; ADD ; DUG 2 ; DROP } ;
              DROP } ;
       DUP ;
       PUSH int 0 ;
       COMPARE ;
       EQ ;
       IF
         { { DIG 5 ; DUP ; DUG 6 ; SENDER ; SOME ; SWAP ; CAR ; PAIR ; DUG 6 ; DIG 5 ; DROP } }
         { {} } ;
       DIG 3 ;
       DROP ;
       DIG 2 ;
       DROP ;
       DROP ;
       DROP ;
       DROP ;
       NIL operation ;
       PAIR }
