parameter (or :_entries (string %_Liq_entry_newStudent) (string %_Liq_entry_certifyStudent));
storage (pair :storage (list %students (pair :student (string %name) (bool %certificate))) (address %certifier));
code { DUP ;
       DIP { CDR @storage_slash_1 } ;
       CAR @parameter_slash_2 ;
       DUP @parameter ;
       IF_LEFT { RENAME @name_slash_3 ;
                 { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } ;
                 DUP @oldState ;
                 CDR %certifier ;
                 SENDER @sender ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "Sender cannot call" ;
                      FAILWITH }
                    { UNIT } ;
                 DROP ;
                 DUP @oldState ;
                 CDR %certifier ;
                 SWAP ;
                 CAR %students ;
                 PUSH bool False ;
                 { DIP { { DIP { { DIP { DUP } ; SWAP } } ; SWAP } } ; SWAP } ;
                 DIP { DIP { DIP { DIP { DROP } } } } ;
                 PAIR %name %certificate ;
                 CONS @newStudents ;
                 PAIR @newState %students %certifier ;
                 NIL operation ;
                 PAIR }
               { RENAME @name_slash_8 ;
                 { DIP { { DIP { DUP @storage } ; SWAP } } ; SWAP } ;
                 DUP @oldState ;
                 CDR %certifier ;
                 SENDER @sender ;
                 COMPARE ;
                 NEQ ;
                 IF { PUSH string "Sender cannot call" ;
                      FAILWITH }
                    { UNIT } ;
                 DROP ;
                 DUP @oldState ;
                 CDR %certifier ;
                 { DIP { DUP @oldState } ; SWAP } ;
                 CAR %students ;
                 MAP { RENAME @student_slash_11 ; { DIP { { DIP { { DIP { DUP @name } ; SWAP } } ; SWAP } } ; SWAP } ; { DIP { DUP @student } ; SWAP } ; CAR %name ; COMPARE ; EQ ; IF { PUSH bool True ;
                      { DIP { DUP @student } ; SWAP } ;
                      CAR %name ;
                      PAIR %name %certificate }
                    { DUP @student ;
                      CDR %certificate ;
                      { DIP { DUP @student } ; SWAP } ;
                      CAR %name ;
                      PAIR %name %certificate } ; DIP { DROP } } ;
                 DIP { DIP { DROP ; DROP } } ;
                 RENAME @newStudents ;
                 PAIR @newState %students %certifier ;
                 NIL operation ;
                 PAIR } ;
       DIP { DROP ; DROP } }