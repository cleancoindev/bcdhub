// Code generated by MockGen. DO NOT EDIT.
// Source: tzip/repository.go

// Package mock_tzip is a generated GoMock package.
package mock_tzip

import (
	tzip "github.com/baking-bad/bcdhub/internal/models/tzip"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRepository) Get(network, address string) (tzip.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", network, address)
	ret0, _ := ret[0].(tzip.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRepositoryMockRecorder) Get(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), network, address)
}

// GetWithEvents mocks base method
func (m *MockRepository) GetWithEvents() ([]tzip.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithEvents")
	ret0, _ := ret[0].([]tzip.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithEvents indicates an expected call of GetWithEvents
func (mr *MockRepositoryMockRecorder) GetWithEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithEvents", reflect.TypeOf((*MockRepository)(nil).GetWithEvents))
}

// GetWithEventsCounts mocks base method
func (m *MockRepository) GetWithEventsCounts() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithEventsCounts")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithEventsCounts indicates an expected call of GetWithEventsCounts
func (mr *MockRepositoryMockRecorder) GetWithEventsCounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithEventsCounts", reflect.TypeOf((*MockRepository)(nil).GetWithEventsCounts))
}

// GetDApps mocks base method
func (m *MockRepository) GetDApps() ([]tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDApps")
	ret0, _ := ret[0].([]tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDApps indicates an expected call of GetDApps
func (mr *MockRepositoryMockRecorder) GetDApps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDApps", reflect.TypeOf((*MockRepository)(nil).GetDApps))
}

// GetDAppBySlug mocks base method
func (m *MockRepository) GetDAppBySlug(slug string) (*tzip.DApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDAppBySlug", slug)
	ret0, _ := ret[0].(*tzip.DApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDAppBySlug indicates an expected call of GetDAppBySlug
func (mr *MockRepositoryMockRecorder) GetDAppBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDAppBySlug", reflect.TypeOf((*MockRepository)(nil).GetDAppBySlug), slug)
}

// GetBySlug mocks base method
func (m *MockRepository) GetBySlug(slug string) (*tzip.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySlug", slug)
	ret0, _ := ret[0].(*tzip.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySlug indicates an expected call of GetBySlug
func (mr *MockRepositoryMockRecorder) GetBySlug(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySlug", reflect.TypeOf((*MockRepository)(nil).GetBySlug), slug)
}

// GetAliases mocks base method
func (m *MockRepository) GetAliases(network string) ([]tzip.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", network)
	ret0, _ := ret[0].([]tzip.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases
func (mr *MockRepositoryMockRecorder) GetAliases(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockRepository)(nil).GetAliases), network)
}

// GetAliasesMap mocks base method
func (m *MockRepository) GetAliasesMap(network string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasesMap", network)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasesMap indicates an expected call of GetAliasesMap
func (mr *MockRepositoryMockRecorder) GetAliasesMap(network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasesMap", reflect.TypeOf((*MockRepository)(nil).GetAliasesMap), network)
}

// GetAlias mocks base method
func (m *MockRepository) GetAlias(network, address string) (*tzip.TZIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", network, address)
	ret0, _ := ret[0].(*tzip.TZIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockRepositoryMockRecorder) GetAlias(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockRepository)(nil).GetAlias), network, address)
}
